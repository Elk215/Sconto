<?php return array (
  'preserve_keys' => true,
  'update_object' => true,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '66ee8d5d0ef0dc4818faa351730ae1d2',
  'package' => 'modx',
  'class' => 'modSnippet',
  'signature' => '4bcd1534e52de54bf6672ab2e113fec5',
  'native_key' => 46,
  'object' => '{"id":46,"source":1,"property_preprocess":0,"name":"msGetOrder","description":"","editor_type":0,"category":11,"cache_type":0,"snippet":"\\/** @var modX $modx *\\/\\r\\n\\/** @var array $scriptProperties *\\/\\r\\n\\/** @var miniShop2 $miniShop2 *\\/\\r\\n$miniShop2 = $modx->getService(\'miniShop2\');\\r\\n$miniShop2->initialize($modx->context->key);\\r\\n\\/** @var pdoFetch $pdoFetch *\\/\\r\\nif (!$modx->loadClass(\'pdofetch\', MODX_CORE_PATH . \'components\\/pdotools\\/model\\/pdotools\\/\', false, true)) {\\r\\n    return false;\\r\\n}\\r\\n$pdoFetch = new pdoFetch($modx, $scriptProperties);\\r\\n$pdoFetch->addTime(\'pdoTools loaded.\');\\r\\n\\r\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'tpl.msGetOrder\');\\r\\n\\r\\nif (empty($id) && !empty($_GET[\'msorder\'])) {\\r\\n    $id = (int)$_GET[\'msorder\'];\\r\\n}\\r\\nif (empty($id)) {\\r\\n    return;\\r\\n}\\r\\n\\/** @var msOrder $order *\\/\\r\\nif (!$order = $modx->getObject(\'msOrder\', $id)) {\\r\\n    return $modx->lexicon(\'ms2_err_order_nf\');\\r\\n}\\r\\n$canView = (!empty($_SESSION[\'minishop2\'][\'orders\']) && in_array($id, $_SESSION[\'minishop2\'][\'orders\'])) ||\\r\\n    $order->get(\'user_id\') == $modx->user->id || $modx->user->hasSessionContext(\'mgr\') || !empty($scriptProperties[\'id\']);\\r\\nif (!$canView) {\\r\\n    return \'\';\\r\\n}\\r\\n\\r\\n\\/\\/ Select ordered products\\r\\n$where = array(\\r\\n    \'msOrderProduct.order_id\' => $id,\\r\\n);\\r\\n\\r\\n\\/\\/ Include products properties\\r\\n$leftJoin = array(\\r\\n    \'msProduct\' => array(\\r\\n        \'class\' => \'msProduct\',\\r\\n        \'on\' => \'msProduct.id = msOrderProduct.product_id\',\\r\\n    ),\\r\\n    \'Data\' => array(\\r\\n        \'class\' => \'msProductData\',\\r\\n        \'on\' => \'msProduct.id = Data.id\',\\r\\n    ),\\r\\n    \'Vendor\' => array(\\r\\n        \'class\' => \'msVendor\',\\r\\n        \'on\' => \'Data.vendor = Vendor.id\',\\r\\n    ),\\r\\n);\\r\\n\\r\\n\\/\\/ Select columns\\r\\n$select = array(\\r\\n    \'msProduct\' => !empty($includeContent)\\r\\n        ? $modx->getSelectColumns(\'msProduct\', \'msProduct\')\\r\\n        : $modx->getSelectColumns(\'msProduct\', \'msProduct\', \'\', array(\'content\'), true),\\r\\n    \'Data\' => $modx->getSelectColumns(\'msProductData\', \'Data\', \'\', array(\'id\'),\\r\\n            true) . \',`Data`.`price` as `original_price`\',\\r\\n    \'Vendor\' => $modx->getSelectColumns(\'msVendor\', \'Vendor\', \'vendor.\', array(\'id\'), true),\\r\\n    \'OrderProduct\' => $modx->getSelectColumns(\'msOrderProduct\', \'msOrderProduct\', \'\', array(\'id\'), true).\', `msOrderProduct`.`id` as `order_product_id`\',\\r\\n);\\r\\n\\r\\n\\/\\/ Include products thumbnails\\r\\nif (!empty($includeThumbs)) {\\r\\n    $thumbs = array_map(\'trim\', explode(\',\', $includeThumbs));\\r\\n    if (!empty($thumbs[0])) {\\r\\n        foreach ($thumbs as $thumb) {\\r\\n            $leftJoin[$thumb] = array(\\r\\n                \'class\' => \'msProductFile\',\\r\\n                \'on\' => \\"`{$thumb}`.product_id = msProduct.id AND `{$thumb}`.parent != 0 AND `{$thumb}`.path LIKE \'%\\/{$thumb}\\/%\'\\",\\r\\n            );\\r\\n            $select[$thumb] = \\"`{$thumb}`.url as \'{$thumb}\'\\";\\r\\n        }\\r\\n        $pdoFetch->addTime(\'Included list of thumbnails: <b>\' . implode(\', \', $thumbs) . \'<\\/b>.\');\\r\\n    }\\r\\n}\\r\\n\\r\\n\\/\\/ Add user parameters\\r\\nforeach (array(\'where\', \'leftJoin\', \'select\') as $v) {\\r\\n    if (!empty($scriptProperties[$v])) {\\r\\n        $tmp = $scriptProperties[$v];\\r\\n        if (!is_array($tmp)) {\\r\\n            $tmp = json_decode($tmp, true);\\r\\n        }\\r\\n        if (is_array($tmp)) {\\r\\n            $$v = array_merge($$v, $tmp);\\r\\n        }\\r\\n    }\\r\\n    unset($scriptProperties[$v]);\\r\\n}\\r\\n$pdoFetch->addTime(\'Conditions prepared\');\\r\\n\\r\\n\\/\\/ Tables for joining\\r\\n$default = array(\\r\\n    \'class\' => \'msOrderProduct\',\\r\\n    \'where\' => $where,\\r\\n    \'leftJoin\' => $leftJoin,\\r\\n    \'select\' => $select,\\r\\n    \'joinTVsTo\' => \'msProduct\',\\r\\n    \'sortby\' => \'msOrderProduct.id\',\\r\\n    \'sortdir\' => \'asc\',\\r\\n    \'groupby\' => \'msOrderProduct.id\',\\r\\n    \'fastMode\' => false,\\r\\n    \'limit\' => 0,\\r\\n    \'return\' => \'data\',\\r\\n    \'decodeJSON\' => true,\\r\\n    \'nestedChunkPrefix\' => \'minishop2_\',\\r\\n);\\r\\n\\/\\/ Merge all properties and run!\\r\\n$pdoFetch->setConfig(array_merge($default, $scriptProperties), true);\\r\\n$rows = $pdoFetch->run();\\r\\n\\r\\n$products = array();\\r\\n$cart_count = 0;\\r\\nforeach ($rows as $product) {\\r\\n    $product[\'old_price\'] = $miniShop2->formatPrice(\\r\\n        $product[\'original_price\'] > $product[\'price\']\\r\\n            ? $product[\'original_price\']\\r\\n            : $product[\'old_price\']\\r\\n    );\\r\\n    $product[\'price\'] = $miniShop2->formatPrice($product[\'price\']);\\r\\n    $product[\'cost\'] = $miniShop2->formatPrice($product[\'cost\']);\\r\\n    $product[\'weight\'] = $miniShop2->formatWeight($product[\'weight\']);\\r\\n\\r\\n    $product[\'id\'] = (int)$product[\'id\'];\\r\\n    if (empty($product[\'name\'])) {\\r\\n        $product[\'name\'] = $product[\'pagetitle\'];\\r\\n    } else {\\r\\n        $product[\'pagetitle\'] = $product[\'name\'];\\r\\n    }\\r\\n\\r\\n    \\/\\/ Additional properties of product\\r\\n    if (!empty($product[\'options\']) && is_array($product[\'options\'])) {\\r\\n        foreach ($product[\'options\'] as $option => $value) {\\r\\n            $product[\'option.\' . $option] = $value;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    \\/\\/ Add option values\\r\\n    $options = $modx->call(\'msProductData\', \'loadOptions\', array(&$modx, $product[\'id\']));\\r\\n    $products[] = array_merge($product, $options);\\r\\n\\r\\n    \\/\\/ Count total\\r\\n    $cart_count += $product[\'count\'];\\r\\n}\\r\\n\\r\\n$pls = array_merge($scriptProperties, array(\\r\\n    \'order\' => $order->toArray(),\\r\\n    \'products\' => $products,\\r\\n    \'user\' => ($tmp = $order->getOne(\'User\'))\\r\\n        ? array_merge($tmp->getOne(\'Profile\')->toArray(), $tmp->toArray())\\r\\n        : array(),\\r\\n    \'address\' => ($tmp = $order->getOne(\'Address\'))\\r\\n        ? $tmp->toArray()\\r\\n        : array(),\\r\\n    \'delivery\' => ($tmp = $order->getOne(\'Delivery\'))\\r\\n        ? $tmp->toArray()\\r\\n        : array(),\\r\\n    \'payment\' => ($payment = $order->getOne(\'Payment\'))\\r\\n        ? $payment->toArray()\\r\\n        : array(),\\r\\n    \'total\' => array(\\r\\n        \'cost\' => $miniShop2->formatPrice($order->get(\'cost\')),\\r\\n        \'cart_cost\' => $miniShop2->formatPrice($order->get(\'cart_cost\')),\\r\\n        \'delivery_cost\' => $miniShop2->formatPrice($order->get(\'delivery_cost\')),\\r\\n        \'weight\' => $miniShop2->formatWeight($order->get(\'weight\')),\\r\\n        \'cart_weight\' => $miniShop2->formatWeight($order->get(\'weight\')),\\r\\n        \'cart_count\' => $cart_count,\\r\\n    ),\\r\\n));\\r\\n\\r\\n\\/\\/ add \\"payment\\" link\\r\\nif ($payment AND $class = $payment->get(\'class\')) {\\r\\n    $status = $modx->getOption(\'payStatus\', $scriptProperties, \'1\');\\r\\n    $status = array_map(\'trim\', explode(\',\', $status));\\r\\n    if (in_array($order->get(\'status\'), $status)) {\\r\\n        $miniShop2->loadCustomClasses(\'payment\');\\r\\n        if (class_exists($class)) {\\r\\n            \\/** @var msPaymentHandler|PayPal $handler *\\/\\r\\n            $handler = new $class($order);\\r\\n            if (method_exists($handler, \'getPaymentLink\')) {\\r\\n                $link = $handler->getPaymentLink($order);\\r\\n                $pls[\'payment_link\'] = $link;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n$output = $pdoFetch->getChunk($tpl, $pls);\\r\\n\\r\\nif ($modx->user->hasSessionContext(\'mgr\') && !empty($showLog)) {\\r\\n    $output .= \'<pre class=\\"msGetOrderLog\\">\' . print_r($pdoFetch->getTime(), true) . \'<\\/pre>\';\\r\\n}\\r\\n\\r\\nif (!empty($toPlaceholder)) {\\r\\n    $modx->setPlaceholder($toPlaceholder, $output);\\r\\n} else {\\r\\n    return $output;\\r\\n}","locked":0,"properties":"a:5:{s:3:\\"tpl\\";a:7:{s:4:\\"name\\";s:3:\\"tpl\\";s:4:\\"desc\\";s:12:\\"ms2_prop_tpl\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:14:\\"tpl.msGetOrder\\";s:7:\\"lexicon\\";s:20:\\"minishop2:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"includeTVs\\";a:7:{s:4:\\"name\\";s:10:\\"includeTVs\\";s:4:\\"desc\\";s:19:\\"ms2_prop_includeTVs\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"minishop2:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:13:\\"includeThumbs\\";a:7:{s:4:\\"name\\";s:13:\\"includeThumbs\\";s:4:\\"desc\\";s:22:\\"ms2_prop_includeThumbs\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"minishop2:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:13:\\"toPlaceholder\\";a:7:{s:4:\\"name\\";s:13:\\"toPlaceholder\\";s:4:\\"desc\\";s:22:\\"ms2_prop_toPlaceholder\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"minishop2:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"showLog\\";a:7:{s:4:\\"name\\";s:7:\\"showLog\\";s:4:\\"desc\\";s:16:\\"ms2_prop_showLog\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:20:\\"minishop2:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"core\\/components\\/minishop2\\/elements\\/snippets\\/snippet.ms_get_order.php","content":"\\/** @var modX $modx *\\/\\r\\n\\/** @var array $scriptProperties *\\/\\r\\n\\/** @var miniShop2 $miniShop2 *\\/\\r\\n$miniShop2 = $modx->getService(\'miniShop2\');\\r\\n$miniShop2->initialize($modx->context->key);\\r\\n\\/** @var pdoFetch $pdoFetch *\\/\\r\\nif (!$modx->loadClass(\'pdofetch\', MODX_CORE_PATH . \'components\\/pdotools\\/model\\/pdotools\\/\', false, true)) {\\r\\n    return false;\\r\\n}\\r\\n$pdoFetch = new pdoFetch($modx, $scriptProperties);\\r\\n$pdoFetch->addTime(\'pdoTools loaded.\');\\r\\n\\r\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'tpl.msGetOrder\');\\r\\n\\r\\nif (empty($id) && !empty($_GET[\'msorder\'])) {\\r\\n    $id = (int)$_GET[\'msorder\'];\\r\\n}\\r\\nif (empty($id)) {\\r\\n    return;\\r\\n}\\r\\n\\/** @var msOrder $order *\\/\\r\\nif (!$order = $modx->getObject(\'msOrder\', $id)) {\\r\\n    return $modx->lexicon(\'ms2_err_order_nf\');\\r\\n}\\r\\n$canView = (!empty($_SESSION[\'minishop2\'][\'orders\']) && in_array($id, $_SESSION[\'minishop2\'][\'orders\'])) ||\\r\\n    $order->get(\'user_id\') == $modx->user->id || $modx->user->hasSessionContext(\'mgr\') || !empty($scriptProperties[\'id\']);\\r\\nif (!$canView) {\\r\\n    return \'\';\\r\\n}\\r\\n\\r\\n\\/\\/ Select ordered products\\r\\n$where = array(\\r\\n    \'msOrderProduct.order_id\' => $id,\\r\\n);\\r\\n\\r\\n\\/\\/ Include products properties\\r\\n$leftJoin = array(\\r\\n    \'msProduct\' => array(\\r\\n        \'class\' => \'msProduct\',\\r\\n        \'on\' => \'msProduct.id = msOrderProduct.product_id\',\\r\\n    ),\\r\\n    \'Data\' => array(\\r\\n        \'class\' => \'msProductData\',\\r\\n        \'on\' => \'msProduct.id = Data.id\',\\r\\n    ),\\r\\n    \'Vendor\' => array(\\r\\n        \'class\' => \'msVendor\',\\r\\n        \'on\' => \'Data.vendor = Vendor.id\',\\r\\n    ),\\r\\n);\\r\\n\\r\\n\\/\\/ Select columns\\r\\n$select = array(\\r\\n    \'msProduct\' => !empty($includeContent)\\r\\n        ? $modx->getSelectColumns(\'msProduct\', \'msProduct\')\\r\\n        : $modx->getSelectColumns(\'msProduct\', \'msProduct\', \'\', array(\'content\'), true),\\r\\n    \'Data\' => $modx->getSelectColumns(\'msProductData\', \'Data\', \'\', array(\'id\'),\\r\\n            true) . \',`Data`.`price` as `original_price`\',\\r\\n    \'Vendor\' => $modx->getSelectColumns(\'msVendor\', \'Vendor\', \'vendor.\', array(\'id\'), true),\\r\\n    \'OrderProduct\' => $modx->getSelectColumns(\'msOrderProduct\', \'msOrderProduct\', \'\', array(\'id\'), true).\', `msOrderProduct`.`id` as `order_product_id`\',\\r\\n);\\r\\n\\r\\n\\/\\/ Include products thumbnails\\r\\nif (!empty($includeThumbs)) {\\r\\n    $thumbs = array_map(\'trim\', explode(\',\', $includeThumbs));\\r\\n    if (!empty($thumbs[0])) {\\r\\n        foreach ($thumbs as $thumb) {\\r\\n            $leftJoin[$thumb] = array(\\r\\n                \'class\' => \'msProductFile\',\\r\\n                \'on\' => \\"`{$thumb}`.product_id = msProduct.id AND `{$thumb}`.parent != 0 AND `{$thumb}`.path LIKE \'%\\/{$thumb}\\/%\'\\",\\r\\n            );\\r\\n            $select[$thumb] = \\"`{$thumb}`.url as \'{$thumb}\'\\";\\r\\n        }\\r\\n        $pdoFetch->addTime(\'Included list of thumbnails: <b>\' . implode(\', \', $thumbs) . \'<\\/b>.\');\\r\\n    }\\r\\n}\\r\\n\\r\\n\\/\\/ Add user parameters\\r\\nforeach (array(\'where\', \'leftJoin\', \'select\') as $v) {\\r\\n    if (!empty($scriptProperties[$v])) {\\r\\n        $tmp = $scriptProperties[$v];\\r\\n        if (!is_array($tmp)) {\\r\\n            $tmp = json_decode($tmp, true);\\r\\n        }\\r\\n        if (is_array($tmp)) {\\r\\n            $$v = array_merge($$v, $tmp);\\r\\n        }\\r\\n    }\\r\\n    unset($scriptProperties[$v]);\\r\\n}\\r\\n$pdoFetch->addTime(\'Conditions prepared\');\\r\\n\\r\\n\\/\\/ Tables for joining\\r\\n$default = array(\\r\\n    \'class\' => \'msOrderProduct\',\\r\\n    \'where\' => $where,\\r\\n    \'leftJoin\' => $leftJoin,\\r\\n    \'select\' => $select,\\r\\n    \'joinTVsTo\' => \'msProduct\',\\r\\n    \'sortby\' => \'msOrderProduct.id\',\\r\\n    \'sortdir\' => \'asc\',\\r\\n    \'groupby\' => \'msOrderProduct.id\',\\r\\n    \'fastMode\' => false,\\r\\n    \'limit\' => 0,\\r\\n    \'return\' => \'data\',\\r\\n    \'decodeJSON\' => true,\\r\\n    \'nestedChunkPrefix\' => \'minishop2_\',\\r\\n);\\r\\n\\/\\/ Merge all properties and run!\\r\\n$pdoFetch->setConfig(array_merge($default, $scriptProperties), true);\\r\\n$rows = $pdoFetch->run();\\r\\n\\r\\n$products = array();\\r\\n$cart_count = 0;\\r\\nforeach ($rows as $product) {\\r\\n    $product[\'old_price\'] = $miniShop2->formatPrice(\\r\\n        $product[\'original_price\'] > $product[\'price\']\\r\\n            ? $product[\'original_price\']\\r\\n            : $product[\'old_price\']\\r\\n    );\\r\\n    $product[\'price\'] = $miniShop2->formatPrice($product[\'price\']);\\r\\n    $product[\'cost\'] = $miniShop2->formatPrice($product[\'cost\']);\\r\\n    $product[\'weight\'] = $miniShop2->formatWeight($product[\'weight\']);\\r\\n\\r\\n    $product[\'id\'] = (int)$product[\'id\'];\\r\\n    if (empty($product[\'name\'])) {\\r\\n        $product[\'name\'] = $product[\'pagetitle\'];\\r\\n    } else {\\r\\n        $product[\'pagetitle\'] = $product[\'name\'];\\r\\n    }\\r\\n\\r\\n    \\/\\/ Additional properties of product\\r\\n    if (!empty($product[\'options\']) && is_array($product[\'options\'])) {\\r\\n        foreach ($product[\'options\'] as $option => $value) {\\r\\n            $product[\'option.\' . $option] = $value;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    \\/\\/ Add option values\\r\\n    $options = $modx->call(\'msProductData\', \'loadOptions\', array(&$modx, $product[\'id\']));\\r\\n    $products[] = array_merge($product, $options);\\r\\n\\r\\n    \\/\\/ Count total\\r\\n    $cart_count += $product[\'count\'];\\r\\n}\\r\\n\\r\\n$pls = array_merge($scriptProperties, array(\\r\\n    \'order\' => $order->toArray(),\\r\\n    \'products\' => $products,\\r\\n    \'user\' => ($tmp = $order->getOne(\'User\'))\\r\\n        ? array_merge($tmp->getOne(\'Profile\')->toArray(), $tmp->toArray())\\r\\n        : array(),\\r\\n    \'address\' => ($tmp = $order->getOne(\'Address\'))\\r\\n        ? $tmp->toArray()\\r\\n        : array(),\\r\\n    \'delivery\' => ($tmp = $order->getOne(\'Delivery\'))\\r\\n        ? $tmp->toArray()\\r\\n        : array(),\\r\\n    \'payment\' => ($payment = $order->getOne(\'Payment\'))\\r\\n        ? $payment->toArray()\\r\\n        : array(),\\r\\n    \'total\' => array(\\r\\n        \'cost\' => $miniShop2->formatPrice($order->get(\'cost\')),\\r\\n        \'cart_cost\' => $miniShop2->formatPrice($order->get(\'cart_cost\')),\\r\\n        \'delivery_cost\' => $miniShop2->formatPrice($order->get(\'delivery_cost\')),\\r\\n        \'weight\' => $miniShop2->formatWeight($order->get(\'weight\')),\\r\\n        \'cart_weight\' => $miniShop2->formatWeight($order->get(\'weight\')),\\r\\n        \'cart_count\' => $cart_count,\\r\\n    ),\\r\\n));\\r\\n\\r\\n\\/\\/ add \\"payment\\" link\\r\\nif ($payment AND $class = $payment->get(\'class\')) {\\r\\n    $status = $modx->getOption(\'payStatus\', $scriptProperties, \'1\');\\r\\n    $status = array_map(\'trim\', explode(\',\', $status));\\r\\n    if (in_array($order->get(\'status\'), $status)) {\\r\\n        $miniShop2->loadCustomClasses(\'payment\');\\r\\n        if (class_exists($class)) {\\r\\n            \\/** @var msPaymentHandler|PayPal $handler *\\/\\r\\n            $handler = new $class($order);\\r\\n            if (method_exists($handler, \'getPaymentLink\')) {\\r\\n                $link = $handler->getPaymentLink($order);\\r\\n                $pls[\'payment_link\'] = $link;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n$output = $pdoFetch->getChunk($tpl, $pls);\\r\\n\\r\\nif ($modx->user->hasSessionContext(\'mgr\') && !empty($showLog)) {\\r\\n    $output .= \'<pre class=\\"msGetOrderLog\\">\' . print_r($pdoFetch->getTime(), true) . \'<\\/pre>\';\\r\\n}\\r\\n\\r\\nif (!empty($toPlaceholder)) {\\r\\n    $modx->setPlaceholder($toPlaceholder, $output);\\r\\n} else {\\r\\n    return $output;\\r\\n}"}',
);